name: Docker Image CI

on:
  # Manually triggered
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/auscope/appstore/app
  AWS_REGION: ap-southeast-2 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: appstore # set this to your Amazon ECR repository name
  ECS_SERVICE: appstore # set this to your Amazon ECS service name
  ECS_CLUSTER: avre # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ../appstore-revision1.json # set this to the path to your Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: appstore # set this to the name of the container in the
    # containerDefinitions section of your task definition
jobs:  
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Get current date
      id: date
      uses: Kaven-Universe/github-action-current-date-time@v1.2.0
      with:
        format: "YYYY-MM-DD_HH_mm_ss"  
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Build the Docker image
      run: cd ui && docker build . --tag $IMAGE_NAME:${{ steps.date.outputs.time }} --file docker/Dockerfile 

    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Push image
      run: docker push $IMAGE_NAME:${{ steps.date.outputs.time }}
      
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
